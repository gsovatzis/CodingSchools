//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestEshop.Client.ProductServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProductServiceReference.IProductService")]
    public interface IProductService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAllProducts", ReplyAction="http://tempuri.org/IProductService/GetAllProductsResponse")]
        System.Collections.Generic.List<TestEshop.Models.Product> GetAllProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetAllProducts", ReplyAction="http://tempuri.org/IProductService/GetAllProductsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<TestEshop.Models.Product>> GetAllProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProduct", ReplyAction="http://tempuri.org/IProductService/GetProductResponse")]
        TestEshop.Models.Product GetProduct(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProduct", ReplyAction="http://tempuri.org/IProductService/GetProductResponse")]
        System.Threading.Tasks.Task<TestEshop.Models.Product> GetProductAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/InsertProduct", ReplyAction="http://tempuri.org/IProductService/InsertProductResponse")]
        void InsertProduct(TestEshop.Models.Product p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/InsertProduct", ReplyAction="http://tempuri.org/IProductService/InsertProductResponse")]
        System.Threading.Tasks.Task InsertProductAsync(TestEshop.Models.Product p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeleteProduct", ReplyAction="http://tempuri.org/IProductService/DeleteProductResponse")]
        void DeleteProduct(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeleteProduct", ReplyAction="http://tempuri.org/IProductService/DeleteProductResponse")]
        System.Threading.Tasks.Task DeleteProductAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateProduct", ReplyAction="http://tempuri.org/IProductService/UpdateProductResponse")]
        void UpdateProduct(TestEshop.Models.Product p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/UpdateProduct", ReplyAction="http://tempuri.org/IProductService/UpdateProductResponse")]
        System.Threading.Tasks.Task UpdateProductAsync(TestEshop.Models.Product p);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProductServiceChannel : TestEshop.Client.ProductServiceReference.IProductService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductServiceClient : System.ServiceModel.ClientBase<TestEshop.Client.ProductServiceReference.IProductService>, TestEshop.Client.ProductServiceReference.IProductService {
        
        public ProductServiceClient() {
        }
        
        public ProductServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<TestEshop.Models.Product> GetAllProducts() {
            return base.Channel.GetAllProducts();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<TestEshop.Models.Product>> GetAllProductsAsync() {
            return base.Channel.GetAllProductsAsync();
        }
        
        public TestEshop.Models.Product GetProduct(int Id) {
            return base.Channel.GetProduct(Id);
        }
        
        public System.Threading.Tasks.Task<TestEshop.Models.Product> GetProductAsync(int Id) {
            return base.Channel.GetProductAsync(Id);
        }
        
        public void InsertProduct(TestEshop.Models.Product p) {
            base.Channel.InsertProduct(p);
        }
        
        public System.Threading.Tasks.Task InsertProductAsync(TestEshop.Models.Product p) {
            return base.Channel.InsertProductAsync(p);
        }
        
        public void DeleteProduct(int Id) {
            base.Channel.DeleteProduct(Id);
        }
        
        public System.Threading.Tasks.Task DeleteProductAsync(int Id) {
            return base.Channel.DeleteProductAsync(Id);
        }
        
        public void UpdateProduct(TestEshop.Models.Product p) {
            base.Channel.UpdateProduct(p);
        }
        
        public System.Threading.Tasks.Task UpdateProductAsync(TestEshop.Models.Product p) {
            return base.Channel.UpdateProductAsync(p);
        }
    }
}
